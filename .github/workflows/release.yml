name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      
      - name: Install dependencies
        run: npm install
      
      - name: Build Angular app
        run: npx ng build --base-href ./
      
      - name: Build Electron TypeScript
        run: |
          npx tsc -p electron/tsconfig.json
          echo "=== dist/ contents ==="
          ls -la dist/
          echo "=== dist/electron/ contents ==="
          ls -la dist/electron/
      
      # macOS Code Signing (optional - requires certificates)
      - name: Prepare for macOS notarization
        if: startsWith(matrix.os, 'macos')
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          # Only run if secrets are configured
          echo "macOS build prepared"
      
      # Build distributables
      - name: Build Electron App
        run: |
          unset GH_TOKEN
          unset GITHUB_TOKEN
          echo "Building for platform: ${{ matrix.platform }}"
          if [ "${{ matrix.platform }}" = "mac" ]; then
            npx electron-builder --mac --publish never || true
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            npx electron-builder --linux --publish never || true
          elif [ "${{ matrix.platform }}" = "win" ]; then
            npx electron-builder --win --publish never || true
          fi
          echo "=== Checking release directory ==="
          ls -la release/ || echo "No release directory"
        shell: bash
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}
          path: |
            release/*.dmg
            release/*.zip
            release/*.exe
            release/*.AppImage
          retention-days: 5
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            release-artifacts/**/*.dmg
            release-artifacts/**/*.zip
            release-artifacts/**/*.exe
            release-artifacts/**/*.AppImage
          body: |
            ## Artist v${{ github.ref_name }}
            
            ### Installation
            
            **macOS:** Download the .dmg file and drag Artist to Applications
            **Windows:** Download and run the .exe installer
            **Linux:** Download the .AppImage and make it executable
            
            ### What's New
            - Check the commit history for updates
            
            ---
            Built with ❤️ by GuildMaster Development
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}