name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      
      # Cache electron binaries and electron-builder cache
      - name: Get Electron cache dir
        id: electron-cache-dir
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "dir=$LOCALAPPDATA\\electron\\Cache" >> $GITHUB_OUTPUT
          else
            echo "dir=$HOME/.cache/electron" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: ${{ steps.electron-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      
      - name: Cache electron-builder
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron-builder
            ~/Library/Caches/electron-builder
            ~/AppData/Local/electron-builder/Cache
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-
      
      - name: Install dependencies
        run: npm ci
        env:
          ELECTRON_CACHE: ${{ steps.electron-cache-dir.outputs.dir }}
      
      - name: Build Angular app
        run: npm run ng:build
      
      - name: Build Electron TypeScript
        run: npm run electron:build
      
      # Build distributables for each platform
      - name: Build Electron App (macOS)
        if: startsWith(matrix.os, 'macos')
        env:
          USE_HARD_LINKS: false
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          npm run electron:dist -- --mac --publish never
      
      - name: Build Electron App (Windows)
        if: startsWith(matrix.os, 'windows')
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          npm run electron:dist -- --win --publish never
      
      - name: Build Electron App (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          npm run electron:dist -- --linux --publish never
      
      # Verify build output
      - name: List build output
        run: |
          echo "=== Build output ==="
          ls -la release/ || echo "No release directory"
        shell: bash
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}
          path: |
            release/*.dmg
            release/*.zip
            release/*.exe
            release/*.AppImage
            release/*.yml
            release/*.yaml
          if-no-files-found: error
          retention-days: 5
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Display structure of downloaded files
        run: |
          echo "=== Downloaded artifacts structure ==="
          ls -laR release-artifacts/
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" \) -exec cp {} release-files/ \;
          ls -la release-files/
      
      - name: Generate checksums
        run: |
          cd release-files
          sha256sum * > checksums.txt
          cat checksums.txt
          cd ..
      
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract version number
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          # Get latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Create release with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if gh release create "${{ github.ref_name }}" \
              --title "Artist v${VERSION}" \
              --notes "$(cat <<EOF
## Artist v${VERSION}

### Installation Instructions

#### macOS
- Download the \`.dmg\` file for your architecture (Intel or Apple Silicon)
- Open the DMG and drag Artist to your Applications folder
- **Note:** Since this app is not signed, you'll need to:
  1. Right-click on the app and select "Open" on first launch
  2. Click "Open" in the security dialog that appears

#### Windows
- Download the \`.exe\` installer
- Run the installer and follow the setup wizard
- You may see a Windows SmartScreen warning - click "More info" and then "Run anyway"

#### Linux
- Download the \`.AppImage\` file
- Make it executable: \`chmod +x Artist-*.AppImage\`
- Run the AppImage directly or integrate it with your system

### What's Changed
${COMMIT_MSG}

### Checksums
\`\`\`
$(cat release-files/checksums.txt)
\`\`\`

---
Built with ❤️ by GuildMaster Development
EOF
            )" \
              release-files/* ; then
              echo "Release created successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Release creation failed, retrying in 30 seconds... (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
                sleep 30
              else
                echo "Failed to create release after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done